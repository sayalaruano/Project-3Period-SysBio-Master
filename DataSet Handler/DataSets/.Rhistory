source("~/Uni/Máster/Project Period 1/DataSet_Handler.R", echo=TRUE)
View(gxData_Entrez)
View(genes_gse4772)
View(genes_gse4772)
View(gxData_Entrez)
View(expression_Data)
gene_order = gxData_Entrez$ENTREZID
genes_gse4772 = data.frame(GSE_ID = as.character(fData(gse4772)$'ID'[genes_found]),
ENTREZ_ID = as.character(fData(gse4772)$'Gene ID'[genes_found]))
gxData_gse4772_Entrez = data.frame(ENSEMBL_ID = gxData_Entrez$ENSEMBL[gxData_Entrez$ENTREZID[gene_order]],
ENTREZ_ID = gxData_Entrez$ENTREZID[gxData_Entrez$ENTREZID[gene_order]],
GSE_ID = genes_gse4772$GSE_ID[genes_gse4772$ENTREZ_ID[gene_order]])
View(gxData_gse4772_Entrez)
gxData_Entrez$ENTREZID[gene_order]
gene_order
gxData_Entrez$ENTREZID[gene_order,]
rownames(gxData_Entrez) = gxData_Entrez$ENTREZID
sum(duplicated(gxData_Entrez))
sum(duplicated(gxData_Entrez$ENTREZID))
duplicated(gxData_Entrez$ENTREZID)
gxData_Entrez$ENTREZID[duplicated(gxData_Entrez$ENTREZID)]
gxData_Entrez$ENTREZID[duplicated(gxData_Entrez$ENTREZID)] == NA
gxData_Entrez$ENTREZID[duplicated(gxData_Entrez$ENTREZID)] = NA
rownames(gxData_Entrez) = gxData_Entrez$ENTREZID
gxData_Entrez$ENTREZID[duplicated(gxData_Entrez$ENTREZID)] = gxData_Entrez$ENTREZID[!duplicated(gxData_Entrez$ENTREZID)]
gxData_Entrez$ENTREZID = gxData_Entrez$ENTREZID[!duplicated(gxData_Entrez$ENTREZID)]
gxData_Entrez = bitr(rownames(gxData),
fromType = "ENSEMBL",
toType = "ENTREZID",
OrgDb = org.Hs.eg.db)
is.na(gxData_Entrez)
sum(is.na(gxData_Entrez))
gxData_Entrez$ENTREZID = gxData_Entrez$ENTREZID[!duplicated(gxData_Entrez$ENTREZID)]
gxData_Entrez = gxData_Entrez$ENTREZID[!duplicated(gxData_Entrez$ENTREZID)]
gxData_Entrez = bitr(rownames(gxData),
fromType = "ENSEMBL",
toType = "ENTREZID",
OrgDb = org.Hs.eg.db)
gxData_Entrez = gxData_Entrez[!duplicated(gxData_Entrez$ENTREZID)]
gxData_Entrez = gxData_Entrez[!duplicated(gxData_Entrez$ENTREZID),]
gxData_Entrez = bitr(rownames(gxData),
fromType = "ENSEMBL",
toType = "ENTREZID",
OrgDb = org.Hs.eg.db)
gxData_Entrez = gxData_Entrez[!duplicated(gxData_Entrez$ENTREZID),]
# Filter dataset genes to those in our gxData
genes_found = fData(gse4772)$'Gene ID' %in% gxData_Entrez$ENTREZID
genes_gse4772 = data.frame(GSE_ID = as.character(fData(gse4772)$'ID'[genes_found]),
ENTREZ_ID = as.character(fData(gse4772)$'Gene ID'[genes_found]))
View(genes_gse4772)
rownames(gxData_Entrez) = gxData_Entrez$ENTREZID
rownames(genes_gse4772) = genes_gse4772$ENTREZ_ID
# Remove duplicates
genes_gse4772 = genes_gse4772[!duplicates(genes_gse4772$ENTREZ_ID)]
# Remove duplicates
genes_gse4772 = genes_gse4772[!duplicated(genes_gse4772$ENTREZ_ID)]
# Remove duplicates
genes_gse4772 = genes_gse4772[!duplicated(genes_gse4772$ENTREZ_ID),]
gxData <- read.delim("MAGNET_GeneExpressionData_CPM_19112020.txt", row.names = 1)
# Extract databases and transform them to a common object type (done manually)
gse1869 <- getGEO('GSE1869', destdir=".")
gse1869 <- gse1869$GSE1869_series_matrix.txt.gz
gse4772 <- getGEO('GDS4772', destdir=".")
gse4772 <- GDS2eSet(gse4772)
# Extract Entrez ID for translation between our gx data and the datasets
gxData_Entrez = bitr(rownames(gxData),
fromType = "ENSEMBL",
toType = "ENTREZID",
OrgDb = org.Hs.eg.db)
# Remove duplicates
gxData_Entrez = gxData_Entrez[!duplicated(gxData_Entrez$ENTREZID),]
# Filter dataset genes to those in our gxData
genes_found = fData(gse4772)$'Gene ID' %in% gxData_Entrez$ENTREZID
# Create Data frame with the Entrez ID of our datasets
geneID_gse4772 = data.frame(GSE_ID = as.character(fData(gse4772)$'ID'[genes_found]),
ENTREZ_ID = as.character(fData(gse4772)$'Gene ID'[genes_found]))
# Remove duplicates
geneID_gse4772 = geneID_gse4772[!duplicated(geneID_gse4772$ENTREZ_ID),]
View(geneID_gse4772)
# Create Data frame with the Entrez ID of our datasets
geneID_gse4772 = data.frame(GSE_ID = as.character(fData(gse4772)$'ID'[genes_found]),
ENTREZ_ID = as.character(fData(gse4772)$'Gene ID'[genes_found]))
# Remove duplicates
geneID_gse4772 = geneID_gse4772[!duplicated(geneID_gse4772$ENTREZ_ID),]
rownames(gxData_Entrez) = gxData_Entrez$ENTREZID
rownames(geneID_gse4772) = geneID_gse4772$ENTREZ_ID
View(gxData_Entrez)
View(geneID_gse4772)
# Create Data frame with the Entrez ID of our datasets
geneID_gse4772 = data.frame(GSE_ID = as.character(fData(gse4772)$'ID'),
ENTREZ_ID = as.character(fData(gse4772)$'Gene ID'))
# Remove duplicates
geneID_gse4772 = geneID_gse4772[!duplicated(geneID_gse4772$ENTREZ_ID),]
rownames(gxData_Entrez) = gxData_Entrez$ENTREZID
rownames(geneID_gse4772) = geneID_gse4772$ENTREZ_ID
# Remove genes not in both datasets
common_genes = c(rownames(gxData_Entrez), rownames(geneID_gse4772))
?and
# Select and remove genes not in both datasets
common_genes = rownames(gxData_Entrez)&&rownames(geneID_gse4772)
# Select and remove genes not in both datasets
common_genes = rownames(gxData_Entrez)&rownames(geneID_gse4772)
?intersect
# Select and remove genes not in both datasets
common_genes = intersect(rownames(gxData_Entrez), rownames(geneID_gse4772))
sum(duplicated(common_genes))
?byrow
geneID_gxData = gxData_Entrez
geneID_gxData = geneID_gxData[common_genes,]
geneID_gse4772 = geneID_gse4772[common_genes,]
colnames(geneID_gxData) = c("ENSEMBL_ID",
"ENTREZ_ID")
View(geneID_gxData)
# Create a new object with all the common genes and their three IDs
geneID_Rosetta = merge(geneID_gxData, geneID_gse4772, by = "ENTREZ_ID")
View(geneID_Rosetta)
gc()
source("~/Uni/Máster/Project Period 1/DataSet_Handler.R", echo=TRUE)
View(gse4772)
gse4772@assayData
assayData(gse4772)
assayData(gse4772)$exprs
expression_Data = assayData(gse4772)$exprs[geneID_Rosetta$GSE_ID,]
View(expression_Data)
expression_Data = assayData(gse4772)$exprs
expression_Data = assayData(gse4772)$exprs[geneID_Rosetta$GSE_ID,]
rownames(expression_Data) = geneID_Rosetta$ENSEMBL_ID[geneID_Rosetta$GSE_ID[rownames(expression_Data)]]
expression_Data = assayData(gse4772)$exprs[geneID_Rosetta$GSE_ID,]
rownames(expression_Data)
geneID_Rosetta$GSE_ID[rownames(expression_Data)]
geneID_Rosetta$GSE_ID
rownames(expression_Data) = geneID_Rosetta$ENSEMBL_ID
gc()
source("~/Uni/Máster/Project Period 1/DataSet_Handler.R", echo=TRUE)
rosetta_gse4772 = create_Rosetta(gse4772)
View(rosetta_gse4772)
rosetta_gse1869 = create_Rosetta(gse2869)
View(rosetta_gse1869)
View(rosetta_gse4772)
rosetta_gse4772 = create_Rosetta(gse4772)
rosetta_gse1869 = create_Rosetta(gse1869)
View(rosetta_gse1869)
View(rosetta_gse4772)
#### ROSETTA ID CREATION #######################################################
create_Rosetta = function(gse) {
# Create Data frame with the Entrez ID of our datasets
geneID_gse = data.frame(GSE_ID = as.character(fData(gse)$'ID'),
ENTREZ_ID = as.character(fData(gse)$'Gene ID'))
# Remove duplicates
geneID_gse = geneID_gse[!duplicated(geneID_gse$ENTREZ_ID), ]
rownames(geneID_gxData) = geneID_gxData$ENTREZ_ID
rownames(geneID_gse) = geneID_gse$ENTREZ_ID
# Select genes in both datasets
common_genes = intersect(rownames(geneID_gxData), rownames(geneID_gse))
geneID_gxData = geneID_gxData[common_genes, ]
geneID_gse = geneID_gse[common_genes, ]
# Create a new object with all the common genes and their three IDs
geneID_Rosetta = merge(geneID_gxData, geneID_gse, by = "ENTREZ_ID")
}
View(rosetta_gse1869)
rosetta_gse4772 = create_Rosetta(gse4772)
rosetta_gse1869 = create_Rosetta(gse1869)
View(gse1869)
ENTREZID_colname = "ID"
fData(gse)$ENTREZID_colname
fData(gse4772)$ENTREZID_colname
fData(gse4772)[,ENTREZID_colname]↕
fData(gse4772)[,ENTREZID_colname]
fData(gse4772)$"ID"
#### ROSETTA ID CREATION #######################################################
create_Rosetta = function(gse, ENTREZID_colname = "ID", GSEID_colname = "Gene ID") {
# Create Data frame with the Entrez ID of our datasets
geneID_gse = data.frame(GSE_ID = as.character(fData(gse)[,ENTREZID_colname]),
ENTREZ_ID = as.character(fData(gse)[,GSEID_colname]))
# Remove duplicates
geneID_gse = geneID_gse[!duplicated(geneID_gse$ENTREZ_ID), ]
rownames(geneID_gxData) = geneID_gxData$ENTREZ_ID
rownames(geneID_gse) = geneID_gse$ENTREZ_ID
# Select genes in both datasets
common_genes = intersect(rownames(geneID_gxData), rownames(geneID_gse))
geneID_gxData = geneID_gxData[common_genes, ]
geneID_gse = geneID_gse[common_genes, ]
# Create a new object with all the common genes and their three IDs
geneID_Rosetta = merge(geneID_gxData, geneID_gse, by = "ENTREZ_ID")
}
create_Rosetta(gse4772)
rosetta4772 = create_Rosetta(gse4772)
View(rosetta4772)
View(gse4772)
View(gse4772@featureData@varMetadata)
View(gse1869@featureData@varMetadata)
gse1869@assayData[["exprs"]]
#### ROSETTA ID CREATION #######################################################
create_Rosetta = function(gse, GSEID_colname = "ID", ENTREZID_colname = "Gene ID") {
# Create Data frame with the Entrez ID of our datasets
geneID_gse = data.frame(GSE_ID = as.character(fData(gse)[,GSEID_colname]),
ENTREZ_ID = as.character(fData(gse)[,ENTREZID_colname]))
# Remove duplicates
geneID_gse = geneID_gse[!duplicated(geneID_gse$ENTREZ_ID), ]
rownames(geneID_gxData) = geneID_gxData$ENTREZ_ID
rownames(geneID_gse) = geneID_gse$ENTREZ_ID
# Select genes in both datasets
common_genes = intersect(rownames(geneID_gxData), rownames(geneID_gse))
geneID_gxData = geneID_gxData[common_genes, ]
geneID_gse = geneID_gse[common_genes, ]
# Create a new object with all the common genes and their three IDs
geneID_Rosetta = merge(geneID_gxData, geneID_gse, by = "ENTREZ_ID")
}
rosetta1869 = create_Rosetta(gse1869, ENTREZID_colname = "ENTREZ_GENE_ID")
View(rosetta1869)
View(gxData)
c(rownames(expression_Data), rownames(gxData))
#### EXPRESSION DATA EXTRACTION ################################################
#extract_expData = function(gse, rosetta) {
# Extract and translate to Ensembl the genes the dataset
expression_Data = assayData(gse)$exprs[rosetta$GSE_ID,]
gse = gse4772
#### EXPRESSION DATA EXTRACTION ################################################
#extract_expData = function(gse, rosetta) {
# Extract and translate to Ensembl the genes the dataset
expression_Data = assayData(gse)$exprs[rosetta$GSE_ID,]
rosetta = rosetta4772
#### EXPRESSION DATA EXTRACTION ################################################
#extract_expData = function(gse, rosetta) {
# Extract and translate to Ensembl the genes the dataset
expression_Data = assayData(gse)$exprs[rosetta$GSE_ID,]
View(expression_Data)
rownames(expression_Data) = rosetta$ENSEMBL_ID
# Add the genes not in the dataset
missing_genes = !duplicated(c(rownames(expression_Data), rownames(gxData)))
?setdiff
# Add the genes not in the dataset
missing_genes = setdiff(rownames(gxData), rownames(expression_Data))
missing_expression = matrix()
nrow(expression_Data)
ncol(missing_genes)
length(missing_genes)
missing_expression = matrix(nrow = nrow(expression_Data), ncol = length(missing_genes))
missing_expression = matrix(ncol = ncol(expression_Data), nrow = length(missing_genes))
View(missing_expression)
?matrix
missing_expression = matrix(nrow = length(missing_genes),
ncol = ncol(expression_Data),
dimnames = list(missing_genes, rownames(expression_Data)))
missing_expression = matrix(nrow = length(missing_genes),
ncol = ncol(expression_Data),
dimnames = list(missing_genes, colnames(expression_Data)))
View(missing_expression)
expression_Data2 = rbind(expression_Data, missing_expression)
?rbind
?data.frame
missing_expression = as.data.frame(matrix(nrow = length(missing_genes),
ncol = ncol(expression_Data),
dimnames = list(missing_genes, colnames(expression_Data))))
View(missing_expression)
expression_Data2 = rbind(expression_Data, missing_expression)
View(expression_Data2)
expression_Data2 = expression_Data2[rownames(gxData),]
source("~/Uni/Máster/Project Period 1/DataSet_Handler.R", echo=TRUE)
expdata = extract_expData(gse4772, rosetta4772)
View(expdata)
rosetta1869 = create_Rosetta(gse1869)
rosetta1869 = create_Rosetta(gse1869, "ID", "ENTREZ_GENE_ID")
View(rosetta1869)
expdata1869 = extract_expData(gse1869, rosetta1869)
View(expdata1869)
gc()
source("~/Uni/Máster/Project Period 1/DataSet_Handler.R", echo=TRUE)
View(rosetta4772)
View(rosetta1869)
expData4772 = extract_expData(gds4772, rosetta4772)
View(expData4772)
expData1869 = extract_expData(gse1869, rosetta1869)
?getGEO
gc()
gse5406 <- getGEO("GSE5406", destdir = ".")
gc()
#### DATASET EXTRACTION #######################################################
# Extract databases and transform them to a common object type (done manually)
setwd(paste0(dirname(
rstudioapi::getSourceEditorContext()$path
), "/DataSets"))
gse1869 <- getGEO('GSE1869', destdir = ".")
gc()
source("~/Uni/Máster/Project Period 1/DataSet_Handler.R", echo=TRUE)
View(gse5406)
gse5406 <- gse5406$GSE5406_series_matrix.txt.gz
View(gse5406[["GSE5406_series_matrix.txt.gz"]]@featureData@varMetadata)
View(gse5406[["GSE5406_series_matrix.txt.gz"]]@featureData@varMetadata)
View(gse5406@featureData@varMetadata)
rosetta5406 = create_Rosetta(gse5406, "ID", "ENTREZ_GENE_ID")
expData5406 = extract_expData(gse5406, rosetta5406)
View(expData5406)
View(expData1869)
View(expData5406)
gse5406 <- getGEO("GSE5406", destdir = ".")
t = list()
class(t)
class(t) == "list"
gc()
#### DATASET EXTRACTION #######################################################
# Extract databases and transform them to a common object type (done manually)
setwd(paste0(dirname(
rstudioapi::getSourceEditorContext()$path
), "/DataSets"))
gse1869 <- getGEO('GSE1869', destdir = ".")
class(gse1869)
class(gse1869) == list
class(gse1869) == "list"
gse1869[1]
rr = gse1869[1]
rr = gse1869[[1]
dd
rr = gse1869[[1]]
gse1869 <- gse1869$GSE1869_series_matrix.txt.gz
if(TRUE){1}
if(TRUE){2}
gds4772 <- getGEO('GDS4772', destdir = ".")
class(gds4772)
class(gds4772) == "GDS"
class(gds4772) == "GEOquery"
if(FALSE){2}else if(TRUE){1}
if(FALSE){2}else if(TRUE){3}
if(FALSE){2}elseif(TRUE){3}
#### DATASET EXTRACTION #######################################################
# Extract databases and transform them to a common object type (done manually)
extract_dataset = function(dataset_name) {
setwd(paste0(
dirname(rstudioapi::getSourceEditorContext()$path),
"/DataSets"
))
dataset <- getGEO(dataset_name, destdir = ".")
if (class(dataset) == "list") {
dataset = dataset[[1]]
} else if (class(dataset) = "GDS") {
#### DATASET EXTRACTION #######################################################
# Extract databases and transform them to a common object type (done manually)
extract_dataset = function(dataset_name) {
setwd(paste0(
dirname(rstudioapi::getSourceEditorContext()$path),
"/DataSets"
))
dataset <- getGEO(dataset_name, destdir = ".")
if (class(dataset) == "list") {
dataset = dataset[[1]]
} else if (class(dataset) == "GDS") {
dataset <- GDS2eSet(dataset)
}
return(dataset)
}
gse5406 = extract_dataset("GSE5406")
rm(gds4772)
gds4772 = extract_dataset("GDS4772")
gc()
source("~/Uni/Máster/Project Period 1/DataSet_Handler.R", echo=TRUE)
translate_dataset("GDS4772")
translate_dataset("GSE18694772")
translate_dataset("GSE1869")
expData_GSE1869 = translate_dataset("GSE1869")
View(expData_GSE1869)
expData_GSE5406 = translate_dataset("GSE5406")
expData_GSE57338 = translate_dataset("GSE57338")
